package nQueens;

public class NQueensSolver {
	public static void main(String[] args) {
        Chessboard board = new Chessboard(8);
        SolutionPrinter printer = new SolutionPrinter();
        board.solve(printer);
    }
}

public class Chessboard {
	private int[] queens; // queens[row] = column position
    private int size;
    private int solutionCount = 0;

    public Chessboard(int size) {
        this.size = size;
        this.queens = new int[size];
        Arrays.fill(queens, -1); // Initialize with no queens placed
    }

    public void solve(SolutionPrinter printer) {
        solve(0, printer);
    }

    private void solve(int row, SolutionPrinter printer) {
        if (row == size) {
            solutionCount++;
            printer.printSolution(queens, solutionCount);
            return;
        }

        for (int col = 0; col < size; col++) {
            if (isSafe(row, col)) {
                queens[row] = col;
                solve(row + 1, printer);
                queens[row] = -1; // backtrack
            }
        }
    }

    private boolean isSafe(int row, int col) {
        // Check if a queen can be placed at (row, col)
        for (int i = 0; i < row; i++) {
            // Same column or diagonal check
            if (queens[i] == col || 
                Math.abs(queens[i] - col) == Math.abs(i - row)) {
                return false;
            }
        }
        return true;
    }

}
public class SolutionPrinter {
	public void printSolution(int[] queens, int solutionNumber) {
        System.out.println("\n\nSolution " + solutionNumber);
        int size = queens.length;
        
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                System.out.print(queens[row] == col ? "|Q" : "|_");
            }
            System.out.println("|");
        }
    }
}